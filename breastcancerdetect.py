# -*- coding: utf-8 -*-
"""BreastCancerDetect.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vko9330srhxNnrUr5VF6TPOxP6qcdeyW
"""

import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

!pwd

ls

open('wdbc.txt')

import pandas as pd
read_file = pd.read_csv (r'wdbc.txt')
read_file.to_csv (r'breast-cancer-data.csv', index=None)

df = pd.read_csv('breast-cancer-data.csv')

df.shape

X = df.iloc[:,2:32].values
Y = df.iloc[:,1].values

df.head()

df.columns=['id','diagnosis','radius_mean',	'texture_mean',	'perimeter_mean',	'area_mean',
               'smoothness_mean',	'compactness_mean',	'concavity_mean',	'concave_points_mean',	'symmetry_mean',	'fractal_dimension_mean',
               'radius_se',	'texture_se',	'perimeter_se',	'area_se',	'smoothness_se',	'compactness_se',	'concavity_se',	'concave_points_se',
               'symmetry_se',	'fractal_dimension_se',	 'radius_worst',	'texture_worst',	'perimeter_worst',	'area_worst',
               'smoothness_worst',	'compactness_worst',	'concavity_worst',	'concave_points_worst',	'symmetry_worst',	'fractal_dimension_worst']

from sklearn.preprocessing import LabelEncoder
label_encoder_Y = LabelEncoder()
Y = label_encoder_Y.fit_transform(Y)

print(X)

df.hist(figsize=(15,15))
plt.subplots_adjust(left=0.1,
                    bottom=0.1, 
                    right=0.9, 
                    top=0.9, 
                    wspace=0.4, 
                    hspace=0.4)

df.isna().sum()
df.isnull().sum()

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 0)

print(X_train[0])

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train);
X_test = sc.transform(X_test)

X_train

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0)
classifier.fit(X_train,Y_train)

Y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test,Y_pred)
cm_t = cm[0][0]+cm[1][1];
cm_f = cm[1][0]+cm[0][1]
cm_total =  cm_t+cm_f;
accuracy = cm_t/cm_total
print(accuracy)

cm

from sklearn.metrics import accuracy_score
acc = accuracy_score(Y_test, Y_pred)

acc

from sklearn.svm import SVC
classifier = SVC(kernel='linear', random_state=1)
classifier.fit(X_train,Y_train)

Y_pred = classifier.predict(X_test)
acc = accuracy_score(Y_test, Y_pred)
print(acc)

from sklearn.naive_bayes import GaussianNB
classifier=GaussianNB();
classifier.fit(X_train,Y_train)
Y_pred = classifier.predict(X_test)
acc = accuracy_score(Y_test, Y_pred)
print(acc)

